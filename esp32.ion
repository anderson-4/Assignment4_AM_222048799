#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <ESP32Servo.h>

// Configuration
const char* ssid = "HUAWEI_B535_26AE";
const char* password = "YG9AA5BE3Q6";
const char* server = "http://192.168.8.130:5000/esp/update";

// Pin Definitions
#define POTENTIOMETER_PIN 34
#define PUSHBUTTON_PIN 13
#define RED_LED_PIN 12
#define BLUE_LED_PIN 14
#define BUZZER_PIN 27
#define EMERGENCY_LED_PIN 33
#define SERVO_PIN 15

// Thresholds
#define MEDIUM_DANGER_THRESHOLD 55
#define HIGH_DANGER_THRESHOLD 75

// Timing Constants
#define SEND_INTERVAL 2000
#define WIFI_TIMEOUT 20000
#define DEBOUNCE_DELAY 50
#define BUZZER_BLINK_INTERVAL 500
#define EMERGENCY_CHECK_INTERVAL 1000
#define SERVO_CHECK_INTERVAL 1000

// Global Variables
unsigned long lastSendTime = 0;
unsigned long lastButtonChangeTime = 0;
unsigned long lastBuzzerToggle = 0;
unsigned long lastEmergencyCheck = 0;
unsigned long lastServoCheck = 0;
bool lastButtonState = HIGH;
bool buttonStateChanged = false;
bool buzzerState = false;
bool currentButtonPressed = false;
bool emergencyState = false;
bool servoState = false;
Servo myServo;

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("\n\nESP32 Emergency System");

  // Initialize Pins
  pinMode(POTENTIOMETER_PIN, INPUT);
  pinMode(PUSHBUTTON_PIN, INPUT_PULLUP);
  pinMode(RED_LED_PIN, OUTPUT);
  pinMode(BLUE_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(EMERGENCY_LED_PIN, OUTPUT);

  // Initialize Servo
  myServo.attach(SERVO_PIN);
  myServo.write(0); // Start at 0 degrees

  // Initial states
  digitalWrite(RED_LED_PIN, LOW);
  digitalWrite(BLUE_LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(EMERGENCY_LED_PIN, LOW);

  testOutputs();
  connectToWiFi();
}

void loop() {
  unsigned long currentTime = millis();

  // Read sensors
  int potValue = readPotentiometer();
  int dangerLevel = map(potValue, 0, 4095, 0, 100);
  readButtonState();

  // Check for emergency commands from server
  if (currentTime - lastEmergencyCheck >= EMERGENCY_CHECK_INTERVAL) {
    checkEmergencyStatus();
    lastEmergencyCheck = currentTime;
  }

  // Check for servo commands from server
  if (currentTime - lastServoCheck >= SERVO_CHECK_INTERVAL) {
    checkServoStatus();
    lastServoCheck = currentTime;
  }

  // Check if button was pressed to toggle emergency state
  if (buttonStateChanged && currentButtonPressed) {
    emergencyState = !emergencyState;
    updateEmergencyOutputs();
    sendEmergencyStateToServer();
    buttonStateChanged = false;
  }

  // Control outputs based on danger level (if not in emergency)
  controlOutputs(dangerLevel, currentTime);

  // Send data periodically
  if (currentTime - lastSendTime >= SEND_INTERVAL) {
    if (WiFi.status() == WL_CONNECTED) {
      sendSensorData(potValue, dangerLevel, emergencyState);
    } else {
      Serial.println("WiFi disconnected. Attempting to reconnect...");
      connectToWiFi();
    }
    lastSendTime = currentTime;
  }

  delay(10);
}

void updateEmergencyOutputs() {
  digitalWrite(EMERGENCY_LED_PIN, emergencyState ? HIGH : LOW);
  digitalWrite(BUZZER_PIN, emergencyState ? HIGH : LOW);
  if (emergencyState) {
    controlServo(false); // Close servo during emergency
  }
}

void controlServo(bool open) {
  if (open) {
    myServo.write(90); // Move to 90 degrees
    servoState = true;
  } else {
    myServo.write(0); // Return to 0 degrees
    servoState = false;
  }
}

void sendEmergencyStateToServer() {
  if (WiFi.status() != WL_CONNECTED) return;

  HTTPClient http;
  http.begin("http://192.168.8.130:5000/esp/emergency");
  http.addHeader("Content-Type", "application/json");

  DynamicJsonDocument doc(128);
  doc["emergency"] = emergencyState;

  String jsonPayload;
  serializeJson(doc, jsonPayload);

  int httpCode = http.POST(jsonPayload);
  if (httpCode > 0) {
    if (httpCode == HTTP_CODE_OK) {
      String response = http.getString();
      Serial.println("Server response: " + response);
    }
  } else {
    Serial.printf("HTTP error: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end();
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  WiFi.begin(ssid, password);

  unsigned long startAttemptTime = millis();
  bool ledState = false;

  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < WIFI_TIMEOUT) {
    Serial.print(".");
    ledState = !ledState;
    digitalWrite(BLUE_LED_PIN, ledState);
    delay(500);
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi");
    for (int i = 0; i < 10; i++) {
      digitalWrite(BLUE_LED_PIN, HIGH);
      delay(200);
      digitalWrite(BLUE_LED_PIN, LOW);
      delay(200);
    }
    ESP.restart();
  } else {
    Serial.println("\nConnected to WiFi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    digitalWrite(BLUE_LED_PIN, LOW);
  }
}

void checkEmergencyStatus() {
  if (WiFi.status() != WL_CONNECTED) return;

  HTTPClient http;
  http.begin("http://192.168.8.130:5000/esp/control");
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    DynamicJsonDocument doc(128);
    deserializeJson(doc, payload);

    bool serverEmergencyState = doc["emergency_button"];
    if (serverEmergencyState != emergencyState) {
      emergencyState = serverEmergencyState;
      updateEmergencyOutputs();
    }
  }
  http.end();
}

void checkServoStatus() {
  if (WiFi.status() != WL_CONNECTED) return;

  HTTPClient http;
  http.begin("http://192.168.8.130:5000/esp/servo_status");
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    DynamicJsonDocument doc(128);
    deserializeJson(doc, payload);

    bool serverServoState = doc["servo_open"];
    if (serverServoState != servoState && !emergencyState) {
      controlServo(serverServoState);
    }
  }
  http.end();
}

int readPotentiometer() {
  int samples = 5;
  int sum = 0;
  for (int i = 0; i < samples; i++) {
    sum += analogRead(POTENTIOMETER_PIN);
    delay(10);
  }
  return sum / samples;
}

void readButtonState() {
  bool currentState = digitalRead(PUSHBUTTON_PIN);

  if (currentState != lastButtonState) {
    lastButtonChangeTime = millis();
  }

  if ((millis() - lastButtonChangeTime) > DEBOUNCE_DELAY) {
    if (currentState != lastButtonState) {
      lastButtonState = currentState;
      currentButtonPressed = (currentState == HIGH);
      if (currentButtonPressed) {
        buttonStateChanged = true;
        Serial.println("Button pressed!");
      }
    }
  }
}

void testOutputs() {
  Serial.println("Testing outputs...");
  digitalWrite(RED_LED_PIN, HIGH);
  delay(500);
  digitalWrite(BLUE_LED_PIN, HIGH);
  delay(500);
  digitalWrite(BUZZER_PIN, HIGH);
  delay(500);
  digitalWrite(EMERGENCY_LED_PIN, HIGH);
  delay(500);
  controlServo(true);
  delay(1000);
  controlServo(false);
  delay(500);
  digitalWrite(RED_LED_PIN, LOW);
  digitalWrite(BLUE_LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(EMERGENCY_LED_PIN, LOW);
  Serial.println("Output test complete");
}

void controlOutputs(int dangerLevel, unsigned long currentTime) {
  if (emergencyState) {
    // Emergency mode overrides normal operation
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(BLUE_LED_PIN, LOW);
    return;
  }

  if (dangerLevel > HIGH_DANGER_THRESHOLD) {
    digitalWrite(RED_LED_PIN, HIGH);
    digitalWrite(BLUE_LED_PIN, LOW);
    if (currentTime - lastBuzzerToggle >= BUZZER_BLINK_INTERVAL) {
      buzzerState = !buzzerState;
      digitalWrite(BUZZER_PIN, buzzerState);
      lastBuzzerToggle = currentTime;
    }
  } else if (dangerLevel > MEDIUM_DANGER_THRESHOLD) {
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BLUE_LED_PIN, HIGH);
    digitalWrite(BUZZER_PIN, LOW);
    buzzerState = false;
  } else {
    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(BLUE_LED_PIN, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    buzzerState = false;
  }
}

void sendSensorData(int potValue, int dangerLevel, bool emergency) {
  if (WiFi.status() != WL_CONNECTED) return;

  HTTPClient http;
  http.begin(server);
  http.addHeader("Content-Type", "application/json");

  DynamicJsonDocument doc(256);
  doc["analog_input"] = potValue;
  doc["danger_level"] = dangerLevel;
  doc["emergency"] = emergency;
  doc["red_led"] = digitalRead(RED_LED_PIN);
  doc["blue_led"] = digitalRead(BLUE_LED_PIN);
  doc["buzzer"] = digitalRead(BUZZER_PIN);
  doc["emergency_led"] = digitalRead(EMERGENCY_LED_PIN);
  doc["servo_open"] = servoState;

  String jsonPayload;
  serializeJson(doc, jsonPayload);

  Serial.print("Sending data: ");
  Serial.println(jsonPayload);

  int httpCode = http.POST(jsonPayload);
  if (httpCode > 0) {
    if (httpCode == HTTP_CODE_OK) {
      String response = http.getString();
      Serial.println("Server response: " + response);
    }
  } else {
    Serial.printf("HTTP error: %s\n", http.errorToString(httpCode).c_str());
  }

  http.end();
}